// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_apm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new clusters apm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters apm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CancelApmPendingPlan cancels pending plan

Cancels the pending plan of an APM cluster.
*/
func (a *Client) CancelApmPendingPlan(params *CancelApmPendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CancelApmPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelApmPendingPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancel-apm-pending-plan",
		Method:             "DELETE",
		PathPattern:        "/clusters/apm/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelApmPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelApmPendingPlanOK), nil

}

/*
CreateApm creates cluster

Creates an APM cluster for a given Elasticsearch cluster.
*/
func (a *Client) CreateApm(params *CreateApmParams, authInfo runtime.ClientAuthInfoWriter) (*CreateApmOK, *CreateApmCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateApmOK:
		return value, nil, nil
	case *CreateApmCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteApm deletes cluster

Deletes an APM cluster.
Requires that you have already successfully issued `_shutdown` command against the cluster.
*/
func (a *Client) DeleteApm(params *DeleteApmParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteApmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-apm",
		Method:             "DELETE",
		PathPattern:        "/clusters/apm/{cluster_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteApmOK), nil

}

/*
GetApmCluster gets cluster

Retrieves cluster information for a APM cluster.
*/
func (a *Client) GetApmCluster(params *GetApmClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-cluster",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmClusterOK), nil

}

/*
GetApmClusterPlanActivity gets plan activity

Retrieves the current and historical plan information for a APM cluster.
*/
func (a *Client) GetApmClusterPlanActivity(params *GetApmClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmClusterPlanActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmClusterPlanActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-cluster-plan-activity",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/plan/activity",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmClusterPlanActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmClusterPlanActivityOK), nil

}

/*
GetApmClusters gets clusters

Retrieves cluster information for all APM clusters.
*/
func (a *Client) GetApmClusters(params *GetApmClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-clusters",
		Method:             "GET",
		PathPattern:        "/clusters/apm",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmClustersOK), nil

}

/*
GetApmMetadataRaw gets cluster metadata

Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
*/
func (a *Client) GetApmMetadataRaw(params *GetApmMetadataRawParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmMetadataRawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-metadata-raw",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmMetadataRawOK), nil

}

/*
GetApmMetadataSettings gets cluster metadata settings

Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
*/
func (a *Client) GetApmMetadataSettings(params *GetApmMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmMetadataSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-metadata-settings",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmMetadataSettingsOK), nil

}

/*
GetApmPendingPlan gets pending plan

Retrieves the pending plan of an APM cluster.
*/
func (a *Client) GetApmPendingPlan(params *GetApmPendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmPendingPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-pending-plan",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmPendingPlanOK), nil

}

/*
GetApmPlan gets plan

Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
*/
func (a *Client) GetApmPlan(params *GetApmPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetApmPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-apm-plan",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/plan",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApmPlanOK), nil

}

/*
MoveApmInstances moves instances

Moves one or more instances belonging to a Apm cluster.
*/
func (a *Client) MoveApmInstances(params *MoveApmInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveApmInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveApmInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move-apm-instances",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/_move",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveApmInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveApmInstancesAccepted), nil

}

/*
MoveApmInstancesAdvanced moves instances advanced

Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
*/
func (a *Client) MoveApmInstancesAdvanced(params *MoveApmInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter) (*MoveApmInstancesAdvancedAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveApmInstancesAdvancedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move-apm-instances-advanced",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/_move",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveApmInstancesAdvancedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveApmInstancesAdvancedAccepted), nil

}

/*
ResetApmSecretToken resets token

Resets the secret token for a given APM cluster.
*/
func (a *Client) ResetApmSecretToken(params *ResetApmSecretTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ResetApmSecretTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetApmSecretTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reset-apm-secret-token",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_reset-token",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetApmSecretTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResetApmSecretTokenOK), nil

}

/*
RestartApm restarts cluster

Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
*/
func (a *Client) RestartApm(params *RestartApmParams, authInfo runtime.ClientAuthInfoWriter) (*RestartApmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartApmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restart-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_restart",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestartApmAccepted), nil

}

/*
ResyncApmCluster resynchronizes cluster

Immediately resynchronizes the search index and cache for the selected APM cluster.
*/
func (a *Client) ResyncApmCluster(params *ResyncApmClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncApmClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncApmClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-apm-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncApmClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncApmClusterOK), nil

}

/*
ResyncApmClusters resynchronizes clusters

Asynchronously resynchronizes the search index for all APM clusters.
*/
func (a *Client) ResyncApmClusters(params *ResyncApmClustersParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncApmClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncApmClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-apm-clusters",
		Method:             "POST",
		PathPattern:        "/clusters/apm/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncApmClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncApmClustersAccepted), nil

}

/*
SearchApms searches clusters

Retrieves cluster information for all Apm clusters that match a given query.
*/
func (a *Client) SearchApms(params *SearchApmsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchApmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchApmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search-apms",
		Method:             "POST",
		PathPattern:        "/clusters/apm/_search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchApmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchApmsOK), nil

}

/*
SetApmMetadataRaw sets cluster metadata

Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance.
Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
*/
func (a *Client) SetApmMetadataRaw(params *SetApmMetadataRawParams, authInfo runtime.ClientAuthInfoWriter) (*SetApmMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetApmMetadataRawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-apm-metadata-raw",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetApmMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetApmMetadataRawOK), nil

}

/*
SetApmName sets cluster name

Assigns a name to the APM instance.
*/
func (a *Client) SetApmName(params *SetApmNameParams, authInfo runtime.ClientAuthInfoWriter) (*SetApmNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetApmNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-apm-name",
		Method:             "PUT",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/name/{new_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetApmNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetApmNameOK), nil

}

/*
ShutdownApm shuts down cluster

Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
*/
func (a *Client) ShutdownApm(params *ShutdownApmParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownApmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownApmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shutdown-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_shutdown",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShutdownApmAccepted), nil

}

/*
StartApmInstances starts instances

Starts the instances belonging to a Apm cluster.
*/
func (a *Client) StartApmInstances(params *StartApmInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StartApmInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-apm-instances",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/_start",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartApmInstancesAccepted), nil

}

/*
StartApmInstancesAll starts all instances

Starts all the instances belonging to a Apm cluster.
*/
func (a *Client) StartApmInstancesAll(params *StartApmInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StartApmInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmInstancesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-apm-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/_start",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartApmInstancesAllAccepted), nil

}

/*
StartApmInstancesAllMaintenanceMode starts maintenance mode all instances

Starts maintenance mode of all instances belonging to a Apm cluster.
*/
func (a *Client) StartApmInstancesAllMaintenanceMode(params *StartApmInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartApmInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmInstancesAllMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-apm-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/maintenance-mode/_start",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartApmInstancesAllMaintenanceModeAccepted), nil

}

/*
StartApmMaintenanceMode starts maintenance mode

Starts maintenance mode of instances belonging to a Apm cluster.
*/
func (a *Client) StartApmMaintenanceMode(params *StartApmMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartApmMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-apm-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartApmMaintenanceModeAccepted), nil

}

/*
StopApmInstances stops instances

Stops the instances belonging to a Apm cluster.
*/
func (a *Client) StopApmInstances(params *StopApmInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StopApmInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-apm-instances",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/_stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopApmInstancesAccepted), nil

}

/*
StopApmInstancesAll stops all instances

Stops all the instances belonging to a Apm cluster.
*/
func (a *Client) StopApmInstancesAll(params *StopApmInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StopApmInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmInstancesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-apm-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/_stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopApmInstancesAllAccepted), nil

}

/*
StopApmInstancesAllMaintenanceMode stops maintenance mode all instances

Stops maintenance mode of all instances belonging to a Apm cluster.
*/
func (a *Client) StopApmInstancesAllMaintenanceMode(params *StopApmInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopApmInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmInstancesAllMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-apm-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/maintenance-mode/_stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopApmInstancesAllMaintenanceModeAccepted), nil

}

/*
StopApmMaintenanceMode stops maintenance mode

Stops maintenance mode of instances belonging to a Apm cluster.
*/
func (a *Client) StopApmMaintenanceMode(params *StopApmMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopApmMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-apm-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopApmMaintenanceModeAccepted), nil

}

/*
UpdateApmMetadataSettings updates cluster metadata settings

All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied.Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateApmMetadataSettings(params *UpdateApmMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApmMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApmMetadataSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-apm-metadata-settings",
		Method:             "PATCH",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApmMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateApmMetadataSettingsOK), nil

}

/*
UpdateApmPlan updates plan

Updates the configuration of an existing Apm cluster.
*/
func (a *Client) UpdateApmPlan(params *UpdateApmPlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateApmPlanOK, *UpdateApmPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApmPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-apm-plan",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/plan",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApmPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateApmPlanOK:
		return value, nil, nil
	case *UpdateApmPlanAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpgradeApm upgrades cluster

Upgrades a running cluster.
*/
func (a *Client) UpgradeApm(params *UpgradeApmParams, authInfo runtime.ClientAuthInfoWriter) (*UpgradeApmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeApmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgrade-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_upgrade",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeApmAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
