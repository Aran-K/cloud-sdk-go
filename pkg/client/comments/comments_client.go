// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new comments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for comments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateComment creates a comment

Creates a comment for the given Resource.
*/
func (a *Client) CreateComment(params *CreateCommentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCommentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-comment",
		Method:             "POST",
		PathPattern:        "/comments/{resource_type}/{resource_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCommentCreated), nil

}

/*
DeleteComment deletes comment

Deletes a Comment.
*/
func (a *Client) DeleteComment(params *DeleteCommentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-comment",
		Method:             "DELETE",
		PathPattern:        "/comments/{resource_type}/{resource_id}/{comment_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCommentOK), nil

}

/*
GetComment gets comment

Retrieves a Comment.
*/
func (a *Client) GetComment(params *GetCommentParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-comment",
		Method:             "GET",
		PathPattern:        "/comments/{resource_type}/{resource_id}/{comment_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommentOK), nil

}

/*
ListComment lists comments

Retrieves all the comments for a given Resource, in reverse modified time order.
*/
func (a *Client) ListComment(params *ListCommentParams, authInfo runtime.ClientAuthInfoWriter) (*ListCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-comment",
		Method:             "GET",
		PathPattern:        "/comments/{resource_type}/{resource_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCommentOK), nil

}

/*
UpdateComment updates comment

Updates a Comment.
*/
func (a *Client) UpdateComment(params *UpdateCommentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-comment",
		Method:             "PUT",
		PathPattern:        "/comments/{resource_type}/{resource_id}/{comment_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCommentOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
