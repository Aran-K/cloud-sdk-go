// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new platform configuration security API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for platform configuration security API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateActiveDirectoryConfiguration creates active directory configuration

Creates a new Active Directory configuration.
*/
func (a *Client) CreateActiveDirectoryConfiguration(params *CreateActiveDirectoryConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActiveDirectoryConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActiveDirectoryConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-active-directory-configuration",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/realms/active-directory",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateActiveDirectoryConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateActiveDirectoryConfigurationCreated), nil

}

/*
CreateEnrollmentToken creates enrollment token

Creates an enrollment token.
*/
func (a *Client) CreateEnrollmentToken(params *CreateEnrollmentTokenParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnrollmentTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnrollmentTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-enrollment-token",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/enrollment-tokens",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEnrollmentTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateEnrollmentTokenOK), nil

}

/*
CreateLdapConfiguration creates l d a p configuration

Creates a new LDAP configuration.
*/
func (a *Client) CreateLdapConfiguration(params *CreateLdapConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLdapConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLdapConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-ldap-configuration",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/realms/ldap",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLdapConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLdapConfigurationCreated), nil

}

/*
CreateSamlConfiguration creates s a m l configuration

Creates a new SAML configuration.
*/
func (a *Client) CreateSamlConfiguration(params *CreateSamlConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSamlConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSamlConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-saml-configuration",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/realms/saml",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSamlConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSamlConfigurationCreated), nil

}

/*
CreateSecurityDeployment creates security deployment

Creates a new security deployment configuration.
*/
func (a *Client) CreateSecurityDeployment(params *CreateSecurityDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSecurityDeploymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecurityDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-security-deployment",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/deployment",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSecurityDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSecurityDeploymentCreated), nil

}

/*
DeleteActiveDirectoryConfiguration deletes active directory configuration

Deletes a single Active Directory configuration.
*/
func (a *Client) DeleteActiveDirectoryConfiguration(params *DeleteActiveDirectoryConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActiveDirectoryConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActiveDirectoryConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-active-directory-configuration",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/security/realms/active-directory/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteActiveDirectoryConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteActiveDirectoryConfigurationOK), nil

}

/*
DeleteEnrollmentToken deletes enrollment token

Revokes and deletes the enrollment token.
*/
func (a *Client) DeleteEnrollmentToken(params *DeleteEnrollmentTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnrollmentTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnrollmentTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-enrollment-token",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/security/enrollment-tokens/{token}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnrollmentTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEnrollmentTokenOK), nil

}

/*
DeleteLdapConfiguration deletes l d a p configuration

Deletes a single LDAP configuration.
*/
func (a *Client) DeleteLdapConfiguration(params *DeleteLdapConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLdapConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-ldap-configuration",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/security/realms/ldap/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLdapConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLdapConfigurationOK), nil

}

/*
DeleteSamlConfiguration deletes s a m l configuration

Deletes a single SAML configuration.
*/
func (a *Client) DeleteSamlConfiguration(params *DeleteSamlConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSamlConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSamlConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-saml-configuration",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/security/realms/saml/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSamlConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSamlConfigurationOK), nil

}

/*
DisableSecurityDeployment disables the security deployment

Disables the existing security deployment configuration.
*/
func (a *Client) DisableSecurityDeployment(params *DisableSecurityDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*DisableSecurityDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableSecurityDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disable-security-deployment",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/deployment/_disable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableSecurityDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisableSecurityDeploymentOK), nil

}

/*
EnableSecurityDeployment enables the security deployment

Enables the existing security deployment configuration.
*/
func (a *Client) EnableSecurityDeployment(params *EnableSecurityDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*EnableSecurityDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableSecurityDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable-security-deployment",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/deployment/_enable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableSecurityDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnableSecurityDeploymentOK), nil

}

/*
GetActiveDirectoryConfiguration gets active directory configuration

Retrieves a single Active Directory security realm configuration.
*/
func (a *Client) GetActiveDirectoryConfiguration(params *GetActiveDirectoryConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetActiveDirectoryConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveDirectoryConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-active-directory-configuration",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/realms/active-directory/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveDirectoryConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActiveDirectoryConfigurationOK), nil

}

/*
GetEnrollmentTokens gets enrollment tokens

Retrieves a list of active enrollment tokens.
*/
func (a *Client) GetEnrollmentTokens(params *GetEnrollmentTokensParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnrollmentTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnrollmentTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-enrollment-tokens",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/enrollment-tokens",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnrollmentTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEnrollmentTokensOK), nil

}

/*
GetLdapConfiguration gets l d a p configuration

Retrieves a single LDAP security realm configuration.
*/
func (a *Client) GetLdapConfiguration(params *GetLdapConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetLdapConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-ldap-configuration",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/realms/ldap/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLdapConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapConfigurationOK), nil

}

/*
GetSamlConfiguration gets s a m l configuration

Retrieves a single SAML security realm configuration.
*/
func (a *Client) GetSamlConfiguration(params *GetSamlConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetSamlConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSamlConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-saml-configuration",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/realms/saml/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSamlConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSamlConfigurationOK), nil

}

/*
GetSecurityDeployment gets current security deployment

Retrieves the current security deployment.
*/
func (a *Client) GetSecurityDeployment(params *GetSecurityDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-security-deployment",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/deployment",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecurityDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityDeploymentOK), nil

}

/*
GetSecurityRealmConfigurations lists security realm configurations

Retrieves a list of security realm configurations.
*/
func (a *Client) GetSecurityRealmConfigurations(params *GetSecurityRealmConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityRealmConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityRealmConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-security-realm-configurations",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/realms",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecurityRealmConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityRealmConfigurationsOK), nil

}

/*
GetTLSCertificate gets TLS certificate

Retrieves a certificate in the TLS certificate chain.
*/
func (a *Client) GetTLSCertificate(params *GetTLSCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*GetTLSCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTLSCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-tls-certificate",
		Method:             "GET",
		PathPattern:        "/platform/configuration/security/tls/{service_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTLSCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTLSCertificateOK), nil

}

/*
ReorderSecurityRealms reorders security realms

Reorder security realms.
*/
func (a *Client) ReorderSecurityRealms(params *ReorderSecurityRealmsParams, authInfo runtime.ClientAuthInfoWriter) (*ReorderSecurityRealmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReorderSecurityRealmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reorder-security-realms",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/realms/_reorder",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReorderSecurityRealmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReorderSecurityRealmsOK), nil

}

/*
SetTLSCertificate sets TLS certificate

Creates or updates the TLS certificate chain.
*/
func (a *Client) SetTLSCertificate(params *SetTLSCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*SetTLSCertificateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTLSCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-tls-certificate",
		Method:             "POST",
		PathPattern:        "/platform/configuration/security/tls/{service_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTLSCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetTLSCertificateAccepted), nil

}

/*
UpdateActiveDirectoryConfiguration updates active directory configuration

Updates an existing Active Directory configuration.
*/
func (a *Client) UpdateActiveDirectoryConfiguration(params *UpdateActiveDirectoryConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActiveDirectoryConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveDirectoryConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-active-directory-configuration",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/security/realms/active-directory/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActiveDirectoryConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateActiveDirectoryConfigurationOK), nil

}

/*
UpdateLdapConfiguration updates l d a p configuration

Updates an existing LDAP configuration.
*/
func (a *Client) UpdateLdapConfiguration(params *UpdateLdapConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLdapConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLdapConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-ldap-configuration",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/security/realms/ldap/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLdapConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLdapConfigurationOK), nil

}

/*
UpdateSamlConfiguration updates s a m l configuration

Updates an existing SAML configuration.
*/
func (a *Client) UpdateSamlConfiguration(params *UpdateSamlConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSamlConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSamlConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-saml-configuration",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/security/realms/saml/{realm_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSamlConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSamlConfigurationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
