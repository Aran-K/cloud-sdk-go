// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new platform configuration snapshots API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for platform configuration snapshots API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSnapshotRepository deletes snapshot repository

Deletes the snapshot repository configuration.
*/
func (a *Client) DeleteSnapshotRepository(params *DeleteSnapshotRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotRepositoryOK, *DeleteSnapshotRepositoryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-snapshot-repository",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/snapshots/repositories/{repository_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSnapshotRepositoryOK:
		return value, nil, nil
	case *DeleteSnapshotRepositoryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetSnapshotRepositories gets snapshot repositories

Retrieves a list of available snapshot repository configurations. To access the configuration contents, you must have privileged permissions.
*/
func (a *Client) GetSnapshotRepositories(params *GetSnapshotRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-snapshot-repositories",
		Method:             "GET",
		PathPattern:        "/platform/configuration/snapshots/repositories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotRepositoriesOK), nil

}

/*
GetSnapshotRepository gets snapshot repository

Retrieves the snapshot repository configuration. To access the configuration contents, you must have privileged permissions.
*/
func (a *Client) GetSnapshotRepository(params *GetSnapshotRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-snapshot-repository",
		Method:             "GET",
		PathPattern:        "/platform/configuration/snapshots/repositories/{repository_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotRepositoryOK), nil

}

/*
SetSnapshotRepository sets snapshot repository

Creates or updates the snapshot repository configuration.
*/
func (a *Client) SetSnapshotRepository(params *SetSnapshotRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*SetSnapshotRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSnapshotRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-snapshot-repository",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/snapshots/repositories/{repository_name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetSnapshotRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetSnapshotRepositoryOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
