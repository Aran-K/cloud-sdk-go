// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new platform infrastructure API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for platform infrastructure API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddBlueprinterBlessing adds blessing

Add a Blessing for a runner to a role.
*/
func (a *Client) AddBlueprinterBlessing(params *AddBlueprinterBlessingParams, authInfo runtime.ClientAuthInfoWriter) (*AddBlueprinterBlessingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBlueprinterBlessingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "add-blueprinter-blessing",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings/{runner_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBlueprinterBlessingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddBlueprinterBlessingOK), nil

}

/*
CreateBlueprinterRole creates a role

Create a Blueprinter role.
*/
func (a *Client) CreateBlueprinterRole(params *CreateBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBlueprinterRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprinterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-blueprinter-role",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/blueprinter/roles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBlueprinterRoleCreated), nil

}

/*
CreateConfigStoreOption creates config store option

Inserts new Config Store Option.
*/
func (a *Client) CreateConfigStoreOption(params *CreateConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConfigStoreOptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConfigStoreOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-config-store-option",
		Method:             "POST",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateConfigStoreOptionCreated), nil

}

/*
CreateProxiesFilteredGroup creates filtered group of proxies

Create the settings for a filtered group of proxies.
*/
func (a *Client) CreateProxiesFilteredGroup(params *CreateProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxiesFilteredGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-proxies-filtered-group",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProxiesFilteredGroupOK), nil

}

/*
DeleteAllocator deletes allocator

Deletes the allocator.
*/
func (a *Client) DeleteAllocator(params *DeleteAllocatorParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-allocator",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAllocatorOK), nil

}

/*
DeleteAllocatorMetadataItem deletes allocator metadata item

Removes a single item from the allocator metadata.
*/
func (a *Client) DeleteAllocatorMetadataItem(params *DeleteAllocatorMetadataItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllocatorMetadataItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocatorMetadataItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-allocator-metadata-item",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata/{key}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocatorMetadataItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAllocatorMetadataItemOK), nil

}

/*
DeleteBlueprinterRole deletes role

Delete a role.
*/
func (a *Client) DeleteBlueprinterRole(params *DeleteBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBlueprinterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlueprinterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-blueprinter-role",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBlueprinterRoleOK), nil

}

/*
DeleteConfigStoreOption deletes config store option by name

Delete Config Store Option by name.
*/
func (a *Client) DeleteConfigStoreOption(params *DeleteConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConfigStoreOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-config-store-option",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteConfigStoreOptionOK), nil

}

/*
DeleteLicense deletes license

Deletes the license.
*/
func (a *Client) DeleteLicense(params *DeleteLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-license",
		Method:             "DELETE",
		PathPattern:        "/platform/license",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLicenseOK), nil

}

/*
DeleteProxiesFilteredGroup deletes filtered group of proxies

Deletes a filtered group of proxies by ID.
*/
func (a *Client) DeleteProxiesFilteredGroup(params *DeleteProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxiesFilteredGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-proxies-filtered-group",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProxiesFilteredGroupOK), nil

}

/*
DeleteRunner deletes runner

Delete a runner by id.
*/
func (a *Client) DeleteRunner(params *DeleteRunnerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-runner",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRunnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRunnerOK), nil

}

/*
GetAllocator gets allocator

Retrieves the allocator by the ID.
*/
func (a *Client) GetAllocator(params *GetAllocatorParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-allocator",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllocatorOK), nil

}

/*
GetAllocatorMetadata gets allocator metadata

Retrieves the allocator metadata.
*/
func (a *Client) GetAllocatorMetadata(params *GetAllocatorMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllocatorMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-allocator-metadata",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllocatorMetadataOK), nil

}

/*
GetAllocatorSettings gets allocator settings

Retrieves the allocator override settings.
*/
func (a *Client) GetAllocatorSettings(params *GetAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllocatorSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-allocator-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllocatorSettingsOK), nil

}

/*
GetAllocators gets allocators

Retrieves the information for all of the allocators in the platform.
*/
func (a *Client) GetAllocators(params *GetAllocatorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllocatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-allocators",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllocatorsOK), nil

}

/*
GetBlueprinterRole gets role

Retrieve a role.
*/
func (a *Client) GetBlueprinterRole(params *GetBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetBlueprinterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprinterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-blueprinter-role",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprinterRoleOK), nil

}

/*
GetConfigStoreOption finds config store option by name

Find Config Store Option by name.
*/
func (a *Client) GetConfigStoreOption(params *GetConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigStoreOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-config-store-option",
		Method:             "GET",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigStoreOptionOK), nil

}

/*
GetConstructor gets constructor

Retrieves a constructor by id.
*/
func (a *Client) GetConstructor(params *GetConstructorParams, authInfo runtime.ClientAuthInfoWriter) (*GetConstructorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConstructorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-constructor",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConstructorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConstructorOK), nil

}

/*
GetConstructors gets constructors

Retrieves an overview of all constructors in an ECE installation.
*/
func (a *Client) GetConstructors(params *GetConstructorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetConstructorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConstructorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-constructors",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/constructors",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConstructorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConstructorsOK), nil

}

/*
GetLicense gets license

Retrieves the license.
*/
func (a *Client) GetLicense(params *GetLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-license",
		Method:             "GET",
		PathPattern:        "/platform/license",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseOK), nil

}

/*
GetProxies gets proxies

Retrieves an overview of all proxies.
*/
func (a *Client) GetProxies(params *GetProxiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-proxies",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxiesOK), nil

}

/*
GetProxiesFilteredGroup gets filtered group of proxies

Get data for a filtered group of proxies.
*/
func (a *Client) GetProxiesFilteredGroup(params *GetProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesFilteredGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-proxies-filtered-group",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxiesFilteredGroupOK), nil

}

/*
GetProxiesFilteredGroupHealth gets health for a filtered group of proxies

Get the health status of a filtered group of proxies.
*/
func (a *Client) GetProxiesFilteredGroupHealth(params *GetProxiesFilteredGroupHealthParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxiesFilteredGroupHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesFilteredGroupHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-proxies-filtered-group-health",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}/health",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesFilteredGroupHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxiesFilteredGroupHealthOK), nil

}

/*
GetProxiesHealth gets proxy health

Get the health status of all proxies.
*/
func (a *Client) GetProxiesHealth(params *GetProxiesHealthParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxiesHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-proxies-health",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/health",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxiesHealthOK), nil

}

/*
GetProxiesSettings gets proxies settings

Retrieves the settings for all proxies.
*/
func (a *Client) GetProxiesSettings(params *GetProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxiesSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-proxies-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxiesSettingsOK), nil

}

/*
GetProxy gets proxy

Retrieves a single proxy by ID.
*/
func (a *Client) GetProxy(params *GetProxyParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-proxy",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/{proxy_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxyOK), nil

}

/*
GetRunner gets runner

Retrieves a runner by id.
*/
func (a *Client) GetRunner(params *GetRunnerParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-runner",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRunnerOK), nil

}

/*
GetRunners gets runners

Retrieves an overview of all runners.
*/
func (a *Client) GetRunners(params *GetRunnersParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunnersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-runners",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/runners",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRunnersOK), nil

}

/*
ListBlueprinterRoles lists roles

Retrieve all persisted roles.
*/
func (a *Client) ListBlueprinterRoles(params *ListBlueprinterRolesParams, authInfo runtime.ClientAuthInfoWriter) (*ListBlueprinterRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlueprinterRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-blueprinter-roles",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/blueprinter/roles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBlueprinterRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBlueprinterRolesOK), nil

}

/*
ListConfigStoreOption lists config store option

List all existing Config Store Option.
*/
func (a *Client) ListConfigStoreOption(params *ListConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter) (*ListConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigStoreOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-config-store-option",
		Method:             "GET",
		PathPattern:        "/platform/configuration/store",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListConfigStoreOptionOK), nil

}

/*
MoveClusters moves clusters

Moves the clusters to a different allocator.
*/
func (a *Client) MoveClusters(params *MoveClustersParams, authInfo runtime.ClientAuthInfoWriter) (*MoveClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move-clusters",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/clusters/_move",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveClustersAccepted), nil

}

/*
MoveClustersByType moves clusters by type

Moves the clusters, by type, to a different allocator.
*/
func (a *Client) MoveClustersByType(params *MoveClustersByTypeParams, authInfo runtime.ClientAuthInfoWriter) (*MoveClustersByTypeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveClustersByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move-clusters-by-type",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/clusters/{cluster_type}/_move",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveClustersByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveClustersByTypeAccepted), nil

}

/*
PutConfigStoreOption updates config store option

Update existing Config Store Option.
*/
func (a *Client) PutConfigStoreOption(params *PutConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter) (*PutConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConfigStoreOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-config-store-option",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutConfigStoreOptionOK), nil

}

/*
ResyncAllocator resynchronizes allocator

Immediately synchronizes the allocator information in the back-end search index and caches.
*/
func (a *Client) ResyncAllocator(params *ResyncAllocatorParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncAllocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncAllocatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-allocator",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncAllocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncAllocatorOK), nil

}

/*
ResyncAllocators resynchronizes allocators

Asynchronously synchronizes all allocator information in the back-end search index.
*/
func (a *Client) ResyncAllocators(params *ResyncAllocatorsParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncAllocatorsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncAllocatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-allocators",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncAllocatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncAllocatorsAccepted), nil

}

/*
ResyncConstructor resynchronizes constructor

Immediately resynchronizes the search index and cache for the selected constructor.
*/
func (a *Client) ResyncConstructor(params *ResyncConstructorParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncConstructorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncConstructorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-constructor",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncConstructorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncConstructorOK), nil

}

/*
ResyncConstructors resynchronizes constructors

Asynchronously synchronizes all constructor information in the back-end search index.
*/
func (a *Client) ResyncConstructors(params *ResyncConstructorsParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncConstructorsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncConstructorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-constructors",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncConstructorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncConstructorsAccepted), nil

}

/*
ResyncRunner resynchronizes runner

Immediately resynchronizes the search index and cache for the selected runner.
*/
func (a *Client) ResyncRunner(params *ResyncRunnerParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncRunnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncRunnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-runner",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncRunnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncRunnerOK), nil

}

/*
ResyncRunners resynchronizes runners

Asynchronously synchronizes all runner information in the search index.
*/
func (a *Client) ResyncRunners(params *ResyncRunnersParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncRunnersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncRunnersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-runners",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/runners/_resync",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncRunnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResyncRunnersAccepted), nil

}

/*
SearchAllocators searches allocators

Retrieves the information for all of the allocators in the platform that match the specified query.
*/
func (a *Client) SearchAllocators(params *SearchAllocatorsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchAllocatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAllocatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search-allocators",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/_search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAllocatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchAllocatorsOK), nil

}

/*
SearchRunners searches runners

Retrieves runners that match a given query.
*/
func (a *Client) SearchRunners(params *SearchRunnersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchRunnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRunnersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search-runners",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/runners/_search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchRunnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchRunnersOK), nil

}

/*
SetAllocatorMetadata sets allocator metadata

Sets the allocator metadata.
*/
func (a *Client) SetAllocatorMetadata(params *SetAllocatorMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*SetAllocatorMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-allocator-metadata",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAllocatorMetadataOK), nil

}

/*
SetAllocatorMetadataItem sets allocator metadata item

Adds or updates a single item in the allocator metadata.
*/
func (a *Client) SetAllocatorMetadataItem(params *SetAllocatorMetadataItemParams, authInfo runtime.ClientAuthInfoWriter) (*SetAllocatorMetadataItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorMetadataItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-allocator-metadata-item",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata/{key}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorMetadataItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAllocatorMetadataItemOK), nil

}

/*
SetAllocatorSettings sets allocator settings

Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
*/
func (a *Client) SetAllocatorSettings(params *SetAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetAllocatorSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-allocator-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAllocatorSettingsOK), nil

}

/*
SetBlueprinterBlessings sets blessings

Set blessings for a role.
*/
func (a *Client) SetBlueprinterBlessings(params *SetBlueprinterBlessingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetBlueprinterBlessingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBlueprinterBlessingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-blueprinter-blessings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBlueprinterBlessingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetBlueprinterBlessingsOK), nil

}

/*
SetLicense adds or update license

Adds a new or updates an existing license.
*/
func (a *Client) SetLicense(params *SetLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*SetLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-license",
		Method:             "PUT",
		PathPattern:        "/platform/license",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetLicenseOK), nil

}

/*
SetProxiesSettings sets proxy settings

Overwrites the proxy settings. All unspecified fields are deleted.
*/
func (a *Client) SetProxiesSettings(params *SetProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetProxiesSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProxiesSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-proxies-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/proxies/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetProxiesSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetProxiesSettingsOK), nil

}

/*
SetRunnerRoles sets runner roles

Set runner roles.
*/
func (a *Client) SetRunnerRoles(params *SetRunnerRolesParams, authInfo runtime.ClientAuthInfoWriter) (*SetRunnerRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRunnerRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-runner-roles",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/roles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRunnerRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRunnerRolesOK), nil

}

/*
StartAllocatorMaintenanceMode starts maintenance mode

Starts maintenance mode on the allocator.
*/
func (a *Client) StartAllocatorMaintenanceMode(params *StartAllocatorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartAllocatorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartAllocatorMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-allocator-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartAllocatorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartAllocatorMaintenanceModeAccepted), nil

}

/*
StartConstructorMaintenanceMode starts maintenance mode

Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
*/
func (a *Client) StartConstructorMaintenanceMode(params *StartConstructorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartConstructorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartConstructorMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-constructor-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_start",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartConstructorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartConstructorMaintenanceModeAccepted), nil

}

/*
StopAllocatorMaintenanceMode stops maintenance mode

Stops maintenance mode on the allocator.
*/
func (a *Client) StopAllocatorMaintenanceMode(params *StopAllocatorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopAllocatorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopAllocatorMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-allocator-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopAllocatorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopAllocatorMaintenanceModeAccepted), nil

}

/*
StopConstructorMaintenanceMode stops maintenance mode

Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
*/
func (a *Client) StopConstructorMaintenanceMode(params *StopConstructorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopConstructorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopConstructorMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-constructor-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopConstructorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopConstructorMaintenanceModeAccepted), nil

}

/*
UpdateAllocatorSettings updates allocator settings

Applies the settings as a patch. Only the fields that are referenced in the update are altered.
*/
func (a *Client) UpdateAllocatorSettings(params *UpdateAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAllocatorSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllocatorSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-allocator-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAllocatorSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAllocatorSettingsOK), nil

}

/*
UpdateBlueprinterRole updates role

Update a role.
*/
func (a *Client) UpdateBlueprinterRole(params *UpdateBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBlueprinterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBlueprinterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-blueprinter-role",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateBlueprinterRoleOK), nil

}

/*
UpdateProxiesFilteredGroup updates filtered group of proxies

Update the settings for a filtered group of proxies.
*/
func (a *Client) UpdateProxiesFilteredGroup(params *UpdateProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxiesFilteredGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-proxies-filtered-group",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProxiesFilteredGroupOK), nil

}

/*
UpdateProxiesSettings updates proxy settings

Applies the settings as a patch. Only the fields that are referenced in the update are changed.
*/
func (a *Client) UpdateProxiesSettings(params *UpdateProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxiesSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxiesSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-proxies-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/proxies/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxiesSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProxiesSettingsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
