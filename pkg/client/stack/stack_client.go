// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new stack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVersionStack deletes stack version

Uses the `deleted` flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request.
*/
func (a *Client) DeleteVersionStack(params *DeleteVersionStackParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVersionStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVersionStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-version-stack",
		Method:             "DELETE",
		PathPattern:        "/stack/versions/{version}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVersionStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVersionStackOK), nil

}

/*
GetInstanceTypes gets instance types

Retrieves a list of all instance types.
*/
func (a *Client) GetInstanceTypes(params *GetInstanceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstanceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-instance-types",
		Method:             "GET",
		PathPattern:        "/stack/instance-types",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstanceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstanceTypesOK), nil

}

/*
GetVersionStack gets stack version

Retrieves the Elastic Stack version and template.
*/
func (a *Client) GetVersionStack(params *GetVersionStackParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-version-stack",
		Method:             "GET",
		PathPattern:        "/stack/versions/{version}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionStackOK), nil

}

/*
GetVersionStacks gets stack versions

By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the `show_deleted parameter`.
*/
func (a *Client) GetVersionStacks(params *GetVersionStacksParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-version-stacks",
		Method:             "GET",
		PathPattern:        "/stack/versions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionStacksOK), nil

}

/*
UpdateStackPacks uploads stack pack

Creates or updates an Elastic Stack pack and template.
The endpoint supports `multipart/form-data` requests, as well as `application/zip` and `application/octet-stream` requests with a binary body. The maximum size of the payload is 1Mb.
When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten.
*/
func (a *Client) UpdateStackPacks(params *UpdateStackPacksParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStackPacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackPacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-stack-packs",
		Method:             "POST",
		PathPattern:        "/stack/versions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStackPacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStackPacksOK), nil

}

/*
UpdateVersionStack updates stack version

Updates the Elastic Stack version configuration.
*/
func (a *Client) UpdateVersionStack(params *UpdateVersionStackParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVersionStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVersionStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-version-stack",
		Method:             "PUT",
		PathPattern:        "/stack/versions/{version}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVersionStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVersionStackOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
